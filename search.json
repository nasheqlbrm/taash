[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "taash",
    "section": "",
    "text": "We are following along with this from fastai."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "taash",
    "section": "Install",
    "text": "Install\npip install taash"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "taash",
    "section": "How to use",
    "text": "How to use\nThis library provides a Card class that can be used to create, display and compare playing cards.\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\nsuits are numbered according to the following:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "The suits are displayed with a nice emoji\nFor instance the suit at index 0:\nThe ranks are mostly what one would expect. Note the None at index 0 this is because we want the rank of a valid card to match it’s index.\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card–A basic playing card",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nEquality, less than, and greater than work on the rank and suit indices.\nFor instance, here is a test for equality\n\ntest_eq(Card(suit=1,rank=3), Card(suit=1,rank=3))\n\nand a test for <\n\nassert Card(suit=1,rank=3) < Card(suit=2,rank=3)\n\nand finally for >\n\nassert Card(suit=2,rank=3) > Card(suit=1,rank=3)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards\nWhen we initially create a deck, all of the cards will be present.\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A❤️; 2❤️; 3❤️; 4❤️; 5❤️; 6❤️; 7❤️; 8❤️; 9❤️; 10❤️; J❤️; Q❤️; K❤️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nThere should be 52 cards.\n\ntest_eq(len(deck),52)\n\nWe can check if, say, the Ace of Hearts is in the deck.\n\nassert Card(suit=2,rank=1) in deck\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one.\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(),Card(3,13))\n\nThere are 51 cards left in the deck now\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:taash.card.Card)\n\nRemoves card from the deck. Raises an exception if it is not there\n\ndeck = Deck()\ncard23 = Card(2,3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in the deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement if replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[10♦️, 3♠️, A♣️, 5♠️, 7❤️, 4♦️, Q♣️, K♦️, 6❤️, 9♠️, Q♠️, 8❤️, 2♣️]"
  }
]